#!/bin/bash
# ansible-ssh: Connect to a host using connection variables from an Ansible inventory,
# with fallbacks to standard SSH configuration (e.g., ~/.ssh/config) for unspecified settings.
#
# In addition to standard options (user, port, key, etc.), this script now supports extra SSH options
# from the inventory: ansible_ssh_common_args and ansible_ssh_extra_args. For example, you can configure a
# proxy jump by setting ansible_ssh_common_args: "-o ProxyJump=builder" in your inventory for a given host.
#
# Usage: ansible-ssh -i <inventory_file> <host>
#
# Requirements: ansible, jq, and optionally sshpass (for password authentication)

function usage() {
    echo "Usage: $0 -i <inventory_file> <host>"
    exit 1
}

# Process flags
while getopts ":i:" opt; do
    case $opt in
        i) INVENTORY="$OPTARG" ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))

if [ -z "$INVENTORY" ] || [ -z "$1" ]; then
    usage
fi

HOST="$1"

# Ensure required commands are available
command -v ansible-inventory >/dev/null 2>&1 || { echo "Error: ansible-inventory command not found. Install Ansible."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo "Error: jq is required. Please install jq."; exit 1; }

# Retrieve host variables in JSON format using ansible-inventory
HOST_VARS=$(ansible-inventory -i "$INVENTORY" --host "$HOST")
if [ -z "$HOST_VARS" ]; then
    echo "No host information found for '$HOST' in inventory '$INVENTORY'."
    exit 1
fi

# Parse connection variables with jq.
# If a variable is not defined in the inventory, leave it empty so SSH can fall back to its configuration.
HOST_IP=$(echo "$HOST_VARS" | jq -r '.ansible_host // empty')
if [ -z "$HOST_IP" ]; then
    HOST_IP="$HOST"
fi

# Retrieve SSH user. Check for ansible_ssh_user first, then ansible_user.
USER=$(echo "$HOST_VARS" | jq -r '(.ansible_ssh_user // .ansible_user) // empty')

# Retrieve the SSH port if provided.
PORT=$(echo "$HOST_VARS" | jq -r '.ansible_port // empty')

# Retrieve SSH key if provided.
KEY=$(echo "$HOST_VARS" | jq -r '.ansible_private_key_file // empty')

# Retrieve SSH password. Check for ansible_ssh_pass first, then ansible_password.
SSH_PASS=$(echo "$HOST_VARS" | jq -r '(.ansible_ssh_pass // .ansible_password) // empty')

# Retrieve additional SSH options:
# ansible_ssh_common_args: e.g., "-o ProxyJump=builder"
# ansible_ssh_extra_args: additional custom options if needed.
COMMON_ARGS=$(echo "$HOST_VARS" | jq -r '.ansible_ssh_common_args // empty')
EXTRA_ARGS=$(echo "$HOST_VARS" | jq -r '.ansible_ssh_extra_args // empty')

# Build an array of SSH options.
ssh_opts=()

if [ -n "$PORT" ]; then
    ssh_opts+=("-p" "$PORT")
fi
if [ -n "$KEY" ]; then
    ssh_opts+=("-i" "$KEY")
fi

# If common args are provided, split them into an array and append.
if [ -n "$COMMON_ARGS" ]; then
    read -r -a common_array <<< "$COMMON_ARGS"
    ssh_opts+=("${common_array[@]}")
fi

# If extra args are provided, split them into an array and append.
if [ -n "$EXTRA_ARGS" ]; then
    read -r -a extra_array <<< "$EXTRA_ARGS"
    ssh_opts+=("${extra_array[@]}")
fi

# Construct the target. If a username is provided from the inventory, use it;
# otherwise, let SSH use its default (or those specified in ~/.ssh/config).
if [ -n "$USER" ]; then
    TARGET="$USER@$HOST_IP"
else
    TARGET="$HOST_IP"
fi

echo "Running: ssh "${ssh_opts[@]}" "$TARGET""

# If a password is provided, use sshpass; otherwise, launch a normal SSH session.
if [ -n "$SSH_PASS" ]; then
    command -v sshpass >/dev/null 2>&1 || { echo "Error: sshpass is required for password-based SSH. Please install sshpass."; exit 1; }
    sshpass -p "$SSH_PASS" ssh "${ssh_opts[@]}" "$TARGET"
else
    ssh "${ssh_opts[@]}" "$TARGET"
fi
